<?php

use Drupal\Component\Utility\Html;


/**
 * Implements hook_preprocess_page().
 */
function share_selection_preprocess_page(&$variables)
{
  global $user;
  $share_selection = FALSE;
  // Excluding roles.
  $user_excluded_by_role = FALSE;
  // $excluded_roles = variable_get('share_selection_exclude_roles', array());
//  $excluded_roles = array_filter($excluded_roles);
  if (!empty($excluded_roles)) {
    foreach ($user->roles as $rid => $role) {
      if (in_array($rid, $excluded_roles)) {
        $user_excluded_by_role = TRUE;
        //   break;
      }
    }
  }

  // Avoid process all things if there is no selected networks to show.
  $there_is_networks = FALSE;
  $there_is_networks = TRUE;
  //$services_settings['show'] = array_filter(variable_get('share_selection_show', array()));
  $services_settings['show'] = ['linkedin', 'twitter'];
  if (!empty($services_settings['show'])) {
    $there_is_networks = TRUE;
  }

  // If excluded by role or there is no selected networks, we don't need to explore visibility options.
  if (!$user_excluded_by_role && $there_is_networks) {
    //$exclude_paths = variable_get('share_selection_exclude_paths', 'admin/*');
    $exclude_paths = '';
    // Finding where to show share selection.
//    if (variable_get('share_selection_paths_or_content', 'paths') == 'paths') {
//      if (variable_get('share_selection_paths_behavior', 0) && drupal_match_path(current_path(), $exclude_paths)) {
//        $share_selection = TRUE;
//      }
//      if (!variable_get('share_selection_paths_behavior', 0) && !drupal_match_path(current_path(), $exclude_paths)) {
//        $share_selection = TRUE;
//      }
//    }
//    else {
//      $content_types_show = variable_get('share_selection_content_types', array());
//      if (isset($variables['node'])) {
//        $node = $variables['node'];
//        if (empty($content_types_show)) {
//          $share_selection = TRUE;
//        }
//        elseif (in_array($node->type, $content_types_show)) {
//          $share_selection = TRUE;
//        }
//      }
//    }
//  }
    $share_selection = TRUE;
    // If share selection on this page.
    if ($share_selection) {
      // Add js and css
      $services_settings['weight'] = [];//variable_get('share_selection_weight', array());
      $services_settings['custom'] = [];//variable_get('share_selection_custom', array());
      $services = share_selection_get_links($services_settings['show']);
      $services_weight = array();
      // Render message wrapper.
      $share_selection_message_wrapper = array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => 'ss-dialog-wrapper',
        ),
      );
      $variables['page']['content']['share_selection_message_wrapper'] = $share_selection_message_wrapper;
      // Render links wrapper.
      $share_selection_wrapper = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('share-selection-wrapper', Html::getClass('share-selection-style-' . 'image')),
        ),
      );
      // Sorting links.
      foreach ($services as $service_id => $service) {
        // Load the position.
        $services_weight[$service_id] = isset($services_settings['weight'][$service_id]) ? $services_settings['weight'][$service_id] : 0;
      }
      array_multisort($services_weight, SORT_ASC, $services);
      // Render links.
      foreach ($services as $service_id => $service) {
        // $display_option = variable_get('share_selection_display_style', 'image');
        $display_option = 'image';
        $button_content = array();
        switch ($display_option) {
          case 'image':
            $button_content = share_selection_get_service_icon($service);
            break;

          case 'text':
            $button_content = share_selection_get_service_text_tag($service['name']);
            break;

          case 'image_and_text':
            $button_content = share_selection_get_service_icon($service) . share_selection_get_service_text_tag($service['name']);
            break;
        }
        $share_selection_wrapper[$service_id] = array(
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#value' => $button_content,
          '#attributes' => array(
            'class' => array('share-selection-button'),
            'id' => Html::getClass('share-selection-' . $service_id),
          ),
        );
//      if (isset($service['external_js'])) {
//        drupal_add_js($service['external_js'], 'external');
//      }
//      if (isset($service['js'])) {
//        drupal_add_js($service['js']);
//      }
        // Senfing custom options to js.
        if (isset($service['custom_options'])) {
          $service_settings = array();
          $module_camel_case = share_selection_camel_case($service['module']);
          foreach ($service['custom_options'] as $option_key => $option_label) {
            $option_camel_case = share_selection_camel_case($service_id . ' ' . $option_key);
            $service_settings[$module_camel_case][$option_camel_case] = token_replace($services_settings['custom'][$service_id][$option_key], (isset($variables['node'])) ? array($variables['node']) : array());
          }
          //drupal_add_js($service_settings, 'setting');
        }
      }

      $variables['page']['content']['share_selection'] = $share_selection_wrapper;
    }
  }
}

/**
 * Implements hook_theme().
 */
function share_selection_theme() {
  return array(
    'share_selection_services_drag_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Get services to share text.
 * @param  array  $services services ids to show
 * @param  boolean $reset    If get no cached services
 * @return array            Services
 */
function share_selection_get_links($services = NULL, $reset = FALSE) {
  $links = &drupal_static(__FUNCTION__, NULL);


  // If desired, return only the wanted services.
  if (isset($services)) {
    // Detect a manual request and populate the array correctly.
    if (is_numeric(key($services))) {
      $services = array_combine($services, array_fill(0, count($services), 1));
    }

    // Provide only the services requested.
    $services = array_merge($services, array_intersect_key($links, $services));

    // Remove the unknown services.
    $services = ['linkedin','twitter'];
  }

  return isset($services) ? $services : $links;
}

/**
 * Remove a service from the list if the related module is disabled
 * and can't provide the correct values.
 */
function share_selection_array_filter($services) {
  $result = array();

  foreach ($services as $service_id => $service) {
    if ($service === 1) {
      drupal_set_message(t('@module the service having id "@id" is missing, reactivate its module or save again the list of services.', array('@id' => $service_id, '@module' => 'Share selection:')), 'warning', FALSE);
    }
    else {
      $result[$service_id] = $service;
    }
  }

  return $result;
}

/**
 * Gets the service icon like html img tag
 * @param  array $service Service
 * @return string         Drupal rendered img tag
 */
function share_selection_get_service_icon($service) {
  $icon_path = drupal_get_path('module', $service['module']) . '/images/' . $service['icon'];
  if (file_exists(SHARE_SELECTION_ICONS_FOLDER . DIRECTORY_SEPARATOR . $service['icon'])) {
    $icon_path = '/sites/default/files/share-selection'  . DIRECTORY_SEPARATOR . $service['icon'];
  }
  $icon_path = '/images/twitter.png';
  $service_icon = array(
    '#theme' => 'image',
    '#path' => $icon_path,
  );
  return \Drupal::service('renderer')->renderPlain($service_icon);
}

/**
 * Get the service name as html span tag
 * @param  string $service_name Service name
 * @return string               Drupal rendered span tag
 */
function share_selection_get_service_text_tag($service_name) {
  $service_text_span = array(
    '#type' => 'html_tag',
    '#tag' => 'span',
    '#value' => $service_name,
  );
  return \Drupal::service('renderer')->renderPlain($service_text_span);
}

/**
 * Implements hook_share_selection_links().
 */
function share_selection_share_selection_links() {
  $links = array();

  $links['twitter'] = array(
    'name' => 'Twitter',
    'description' => t('Share this on Twitter'),
    'js' => drupal_get_path('module', 'share_selection') .'/js/ss-twitter.js',
    'icon' => 'twitter.png',
  );
  $links['google_plus'] = array(
    'name' => 'Google+',
    'description' => t('Share this on Google+'),
    'js' => drupal_get_path('module', 'share_selection') .'/js/ss-google-plus.js',
    'icon' => 'google-plus.png',
    'external_js' => 'https://apis.google.com/js/client:plusone.js',
    'custom_options' => array(
      'client_id' => t('Client ID'),
      'contenturl' => t('Content URL'),
    ),
  );
  $links['linkedin'] = array(
    'name' => 'LinkedIn',
    'description' => t('Share this on LinkedIn'),
    'js' => drupal_get_path('module', 'share_selection') .'/js/ss-linkedin.js',
    'icon' => 'linkedin.png',
    'custom_options' => array(
      'apikey' => t('API Key'),
    ),
  );

  return $links;
}

/**
 * Funtion to convert string to Camel Case.
 * @param  string  $str       String to be converted
 * @param  array   $no_strip   Characters to preserve
 * @return string             Converted string
 */
function share_selection_camel_case($str, $no_strip = array()) {
  // Non-alpha and non-numeric characters become spaces.
  $str = preg_replace('/[^a-z0-9' . implode("", $no_strip) . ']+/i', ' ', $str);
  $str = trim($str);
  // Uppercase the first character of each word.
  $str = ucwords($str);
  $str = str_replace(" ", "", $str);
  $str = lcfirst($str);
  return \Drupal::service('renderer')->renderPlain($str);
}
